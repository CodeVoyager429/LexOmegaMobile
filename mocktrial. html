<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>LexOmega | Mock Trial Simulator</title>
  <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/html2pdf.js@0.10.1/dist/html2pdf.bundle.min.js"></script>
  <style>
    body {
      font-family: 'Roboto', sans-serif;
      background: linear-gradient(145deg, #1b1b1b, #2d2d2d);
      color: #f5f5f5;
      margin: 0;
      padding: 0;
      text-align: center;
    }

    header {
      background-color: #111;
      padding: 1.5rem;
      font-size: 2rem;
      font-weight: bold;
      border-bottom: 2px solid gold;
      color: gold;
    }

    .button-grid {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 1.5rem;
      padding: 2rem;
    }

    button {
      background: gold;
      border: none;
      color: black;
      padding: 1rem 2rem;
      font-size: 1.2rem;
      font-weight: bold;
      border-radius: 12px;
      cursor: pointer;
      transition: all 0.3s ease-in-out;
      min-width: 200px;
    }

    button:hover {
      background-color: white;
      transform: scale(1.05);
    }

    .output-box {
      margin: 2rem auto;
      padding: 1.5rem;
      background-color: #1e1e1e;
      border-radius: 10px;
      width: 80%;
      font-style: italic;
      color: #ccc;
    }

    .floating-support {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: gold;
      color: black;
      padding: 0.7rem 1.2rem;
      border-radius: 30px;
      font-weight: bold;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
      z-index: 100;
      cursor: pointer;
    }

    .mic {
      margin-top: 20px;
      font-size: 1rem;
      color: gold;
      cursor: pointer;
    }

    #downloadBtn {
      margin-top: 1rem;
      padding: 0.7rem 1.5rem;
      background-color: gold;
      color: black;
      border: none;
      border-radius: 12px;
      font-weight: bold;
      cursor: pointer;
    }

    #downloadBtn:hover {
      background-color: white;
    }
  </style>
</head>
<body>
  <header>üßë‚Äç‚öñÔ∏è LexOmega Mock Trial Simulator</header>

  <div class="button-grid">
    <button onclick="simulateTrial('Plaintiff')">üßë‚Äçüíº Act as Plaintiff</button>
    <button onclick="simulateTrial('Defendant')">üßë‚Äçüíº Act as Defendant</button>
    <button onclick="simulateTrial('Witness')">üó£Ô∏è Act as Witness</button>
    <button onclick="simulateTrial('Judge')">‚öñÔ∏è Act as Judge</button>
  </div>

  <div id="output" class="output-box">
    Select a role to begin a simulated courtroom argument or statement.<br />
    <strong>EchoPrompt Memory:</strong> <span id="memoryOutput">Initializing...</span>
  </div>

  <button id="downloadBtn" onclick="downloadPDF()">üì• Download Transcript as PDF</button>

  <div class="mic" onclick="startVoice()">üé§ Speak Your Argument (Voice Input Enabled)</div>

  <div class="floating-support" onclick="window.location.href='support.html'">üí¨ Legal Support</div>

  <script>
    const memory = {
      Plaintiff: "Plaintiff memory: Filed a case for rights violation, seeking compensation.",
      Defendant: "Defendant memory: Denies wrongdoing and counters with just cause.",
      Witness: "Witness memory: Recalling events under oath for both parties.",
      Judge: "Judge memory: Monitoring proceedings and applying justice impartially."
    };

    async function simulateTrial(role) {
      const prompts = {
        Plaintiff: "As the Plaintiff, explain the core of your legal argument.",
        Defendant: "As the Defendant, present your primary defense.",
        Witness: "As a Witness, share the key event you observed.",
        Judge: "As the Judge, make an initial courtroom statement."
      };

      const gptResponse = await generateAIResponse(prompts[role]);
      document.getElementById('output').innerHTML = `<strong>${role}:</strong> ${gptResponse}`;
      document.getElementById('memoryOutput').textContent = memory[role];
    }

    async function generateAIResponse(prompt) {
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": "Bearer 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"
        },
        body: JSON.stringify({
          model: "gpt-4",
          messages: [{ role: "user", content: prompt }]
        })
      });
      const data = await response.json();
      return data.choices[0].message.content;
    }

    function startVoice() {
      const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
      recognition.lang = 'en-US';
      recognition.interimResults = false;
      recognition.maxAlternatives = 1;
      recognition.start();

      recognition.onresult = function (event) {
        const speechText = event.results[0][0].transcript;
        document.getElementById('output').innerHTML += `<br><strong>You said:</strong> ${speechText}`;
      };

      recognition.onerror = function (event) {
        alert("Voice input error: " + event.error);
      };
    }

    function downloadPDF() {
      const element = document.getElementById('output');
      html2pdf().from(element).save('LexOmega_Trial_Transcript.pdf');
    }
  </script>
</body>
</html>
