name: LexOmega â€” Batch Ops

on:
  workflow_dispatch:
    inputs:
      ops:
        description: "Comma-separated ops to run (normalize,fmt,sitemap,assetcheck,linkaudit,commit)"
        required: true
        default: "normalize,fmt,sitemap,assetcheck,linkaudit,commit"

permissions:
  contents: write          # needed so the actions/bot can push
  pull-requests: write

jobs:
  run-ops:
    runs-on: ubuntu-latest

    env:
      SITE_SECRET: ${{ secrets.SITE_DOMAIN }}
      OPS: ${{ github.event.inputs.ops }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          # (no cache key at all, avoiding 'none' error and lockfile requirement)

      - name: Parse inputs
        id: parse
        run: |
          IFS=',' read -ra ARR <<< "${OPS}"
          for op in "${ARR[@]}"; do
            op_trimmed="$(echo "$op" | xargs)"
            echo "op_$op_trimmed=true" >> $GITHUB_OUTPUT
          done

      - name: Install CLI tools
        if: always()    # install once; later steps guard on flags
        run: |
          set -e
          npm i -g prettier@3 linkinator@5 sitemap-generator-cli@7

      - name: Prepare SITE value
        shell: bash
        run: |
          if [[ -z "${SITE_SECRET}" ]]; then
            echo "SITE is not set (Actions secret SITE_DOMAIN)."
            exit 1
          fi
          SITE="$SITE_SECRET"
          if [[ "$SITE" != http* ]]; then
            SITE="https://$SITE"
          fi
          echo "SITE=$SITE" >> $GITHUB_ENV

      - name: Normalize filenames (lowercase, no spaces)
        if: steps.parse.outputs.op_normalize == 'true'
        shell: bash
        run: |
          set -e
          git ls-files | while read -r f; do
            d="$(dirname "$f")"
            b="$(basename "$f")"
            newb="$(echo "$b" | tr '[:upper:] ' '[:lower:]_')"
            if [[ "$b" != "$newb" ]]; then
              mkdir -p ".tmp/$d"
              git mv -f "$f" "$d/$newb"
            fi
          done || true

      - name: Format code (Prettier)
        if: steps.parse.outputs.op_fmt == 'true'
        run: |
          set -e
          prettier -w .

      - name: Generate sitemap.xml (best-effort)
        if: steps.parse.outputs.op_sitemap == 'true'
        shell: bash
        run: |
          set -e
          # sitemap-generator-cli exposes 'sitemap-generator' binary
          sitemap-generator "$SITE" -o sitemap.xml --max-depth 0 || true
          test -f sitemap.xml && echo "sitemap.xml generated (or already existed)."

      - name: Asset check (local)
        if: steps.parse.outputs.op_assetcheck == 'true'
        shell: bash
        run: |
          set -e
          test -f sitemap.xml && echo "sitemap.xml present" || (echo "sitemap.xml missing"; exit 1)

      - name: Link audit (external)
        if: steps.parse.outputs.op_linkaudit == 'true'
        shell: bash
        run: |
          set -e
          linkinator "$SITE" --recurse --skip "mailto:,tel:"

      - name: Commit & push changes
        if: steps.parse.outputs.op_commit == 'true'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "chore(batch-ops): apply fmt/normalize and generated artifacts"
          # ensure remote uses token-based auth (required for Actions)
          git remote set-url origin "https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git push origin HEAD:${GITHUB_REF_NAME}
