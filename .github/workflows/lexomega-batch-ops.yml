name: LexOmega ‚Äì Batch Ops

on:
  workflow_dispatch:
    inputs:
      ops:
        description: "Comma-separated ops to run (normalize,fmt,sitemap,assetcheck,linkaudit,commit)"
        required: true
        default: "normalize,fmt,sitemap,assetcheck,linkaudit,commit"

# Give GITHUB_TOKEN the scopes we actually need
permissions:
  contents: write
  pull-requests: write
  actions: read
  workflows: write

jobs:
  batch-ops:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install CLI tools
        run: |
          set -e
          npm install -g prettier@3 sort-package-json@3
          # Try sitemap-generator-cli; if not available, try fallback 'sitemap'
          if ! npm install -g sitemap-generator-cli@latest; then
            echo "‚ö†Ô∏è sitemap-generator-cli unavailable, installing 'sitemap' fallback"
            npm install -g sitemap@latest || true
          fi

      - name: Run batch ops
        run: |
          set -e
          OPS="${{ github.event.inputs.ops }}"
          echo "üöÄ Running ops: $OPS"

          # ---------- NORMALIZE ----------
          if [[ "$OPS" == *"normalize"* ]]; then
            echo "üì¶ Normalizing package.json files (monorepo-safe)"
            mapfile -t PKGS < <(git ls-files -- '**/package.json' ':!:**/node_modules/**')
            if (( ${#PKGS[@]} == 0 )); then
              echo "‚ÑπÔ∏è No package.json files found. Skipping normalize."
            else
              for f in "${PKGS[@]}"; do
                echo "  ‚Ä¢ $f"
                npx --yes sort-package-json "$f"
              done
            fi
          fi

          # ---------- FORMAT ----------
          if [[ "$OPS" == *"fmt"* ]]; then
            echo "‚ú® Formatting with Prettier (excluding .github/workflows)"
            mapfile -t FMT < <(
              git ls-files -- \
                '*.js' '*.jsx' '*.ts' '*.tsx' '*.json' '*.md' '*.css' '*.scss' '*.html' '*.yml' '*.yaml' \
              | grep -vE '^\.github/workflows/'
            )
            if (( ${#FMT[@]} == 0 )); then
              echo "‚ÑπÔ∏è No formattable files found. Skipping fmt."
            else
              printf '%s\0' "${FMT[@]}" | xargs -0 prettier --write
            fi
          fi

          # ---------- SITEMAP ----------
          if [[ "$OPS" == *"sitemap"* ]]; then
            echo "üåê Generating sitemap.xml (best-effort)"
            if command -v sitemap-generator-cli >/dev/null 2>&1; then
              echo "‚úÖ Using sitemap-generator-cli"
              sitemap-generator-cli "https://your-site-url.com" -o ./sitemap.xml || echo "‚ö†Ô∏è Sitemap generation failed (cli)"
            elif command -v sitemap >/dev/null 2>&1; then
              echo "‚úÖ Using fallback 'sitemap' package"
              sitemap "https://your-site-url.com" > ./sitemap.xml || echo "‚ö†Ô∏è Sitemap generation failed (fallback)"
            else
              echo "‚ùå No sitemap tool installed; skipping"
            fi
          fi

          # ---------- ASSET CHECK ----------
          if [[ "$OPS" == *"assetcheck"* ]]; then
            echo "üñºÔ∏è Asset check (best-effort)"
            if [ -d "./public" ]; then
              ls -lh ./public || true
            else
              echo "‚ÑπÔ∏è No ./public directory. Skipping assetcheck."
            fi
          fi

          # ---------- LINK AUDIT (placeholder) ----------
          if [[ "$OPS" == *"linkaudit"* ]]; then
            echo "üîó Link audit placeholder ‚Äì add your link-check command here."
          fi

          # ---------- COMMIT (exclude .github/workflows) ----------
          if [[ "$OPS" == *"commit"* ]]; then
            echo "üíæ Commit & push changes (excluding .github/workflows)"
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"

            # Stage everything except workflow files
            mapfile -t CHANGED < <(git ls-files -m -o --exclude-standard | grep -vE '^\.github/workflows/')
            if (( ${#CHANGED[@]} == 0 )); then
              echo "‚ÑπÔ∏è No changes to commit."
            else
              printf '%s\0' "${CHANGED[@]}" | xargs -0 git add --
              if git diff --cached --quiet; then
                echo "‚ÑπÔ∏è No changes staged after exclusion."
              else
                git commit -m "chore(batch-ops): automated normalize/fmt/sitemap updates"
                git push
              fi
            fi
          fi
