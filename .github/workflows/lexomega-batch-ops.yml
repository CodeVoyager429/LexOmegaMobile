name: LexOmega â€“ Batch Ops

on:
  workflow_dispatch:
    inputs:
      ops:
        description: "Comma-separated ops to run (normalize,fmt,sitemap,assetcheck,linkaudit,commit)"
        required: false
        default: "normalize,fmt,sitemap,assetcheck,linkaudit,commit"

permissions:
  contents: write
  pull-requests: write

env:
  NODE_VERSION: "20.x"

jobs:
  run-ops:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse inputs
        id: parse
        run: |
          OPS="${{ github.event.inputs.ops }}"
          if [ -z "$OPS" ]; then OPS="normalize,fmt,sitemap,assetcheck,linkaudit,commit"; fi
          echo "ops=$OPS" >> "$GITHUB_OUTPUT"
          echo "Batch ops: $OPS"

      - name: Setup Node (no cache)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install CLI tools
        run: |
          set -e
          npm i -g prettier@^3 linkinator@^5 sitemap-generator-cli@7.4.3

      - name: Prepare SITE value
        id: site
        run: |
          DOMAIN="${{ secrets.SITE_DOMAIN }}"
          if [ -n "$DOMAIN" ]; then
            if echo "$DOMAIN" | grep -Eq '^https?://'; then
              SITE="$DOMAIN"
            else
              SITE="https://$DOMAIN"
            fi
            echo "SITE=$SITE" >> "$GITHUB_OUTPUT"
            echo "Using SITE=$SITE"
          else
            echo "No SITE_DOMAIN secret; sitemap/link audit will be skipped."
          fi

      - name: Normalize filenames (lowercase, no spaces)
        if: contains(steps.parse.outputs.ops, 'normalize')
        run: |
          set -e
          find . -type f \
            \( -name "*.html" -o -name "*.css" -o -name "*.js" -o -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.svg" \) \
            -print0 | while IFS= read -r -d '' f; do
              dir=$(dirname "$f")
              base=$(basename "$f")
              newbase=$(echo "$base" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
              if [ "$base" != "$newbase" ]; then
                git mv -f "$f" "$dir/$newbase" || mv -f "$f" "$dir/$newbase"
              fi
            done

      - name: Format code (Prettier)
        if: contains(steps.parse.outputs.ops, 'fmt')
        run: |
          prettier . --ignore-unknown || true

      - name: Generate sitemap.xml (best-effort)
        if: contains(steps.parse.outputs.ops, 'sitemap')
        run: |
          set -e
          if [ -n "${{ steps.site.outputs.SITE }}" ]; then
            sitemap-generator "${{ steps.site.outputs.SITE }}" --verbose --max-depth 0 --output ./sitemap.xml || true
          else
            echo "Skipping sitemap: SITE not set."
          fi

      - name: Asset check (local)
        if: contains(steps.parse.outputs.ops, 'assetcheck')
        run: |
          if [ -f sitemap.xml ]; then
            echo "sitemap.xml present"
          else
            echo "sitemap.xml not present (ok if SITE not set or generator found 0 pages)"
          fi

      - name: Link audit (external)
        if: contains(steps.parse.outputs.ops, 'linkaudit')
        run: |
          if [ -n "${{ steps.site.outputs.SITE }}" ]; then
            linkinator "${{ steps.site.outputs.SITE }}" --recurse --skip "mailto:,tel:" || true
          else
            echo "Skipping link audit: SITE not set."
          fi

      - name: Commit & push changes
        if: contains(steps.parse.outputs.ops, 'commit')
        env:
          GH_EMAIL: actions@github.com
          GH_NAME: github-actions[bot]
        run: |
          set -e
          git config user.email "$GH_EMAIL"
          git config user.name "$GH_NAME"
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "chore(batch-ops): apply fmt/normalize and generated artifacts"
            git push origin HEAD:${GITHUB_REF_NAME:-main}
          else
            echo "No changes to commit."
          fi
